#include<getGaussWA.hpp>
void
getGaussWA(std::vector<REAL_TYPE>& v, std::vector<REAL_TYPE>& w, const size_t level)
{


  // Only use cases that are defined 
  v.resize(level);
  w.resize(level);
 
  switch(level) {
  case 6:
  case 7:
  case 8:
    {
      v[0]  = -0.960289856497536231683560868569;
      v[1]  = -0.796666477413626739591553936476;
      v[2]  = -0.525532409916328985817739049189;
      v[3]  = -0.183434642495649804939476142360;
      v[4]  = -v[3];
      v[5]  = -v[2];
      v[6]  = -v[1];
      v[7]  = -v[0];
      
      w[0] =  0.101228536290376259152531354310;
      w[1] =  0.222381034453374470544355994426;
      w[2] =  0.313706645877887287337962201987;
      w[3] =  0.362683783378361982965150449277;
      w[4] =  w[3];
      w[5] =  w[2];
      w[6] =  w[1];
      w[7] =  w[0];
      
      return;
    }
  case 9:
    {
      
     
      v[0]    = -0.968160239507626089835576202904;
      v[1]    = -0.836031107326635794299429788070;
      v[2]    = -0.613371432700590397308702039341;
      v[3]    = -0.324253423403808929038538014643;
      v[4]    =  0.0000000000000000000000000000000;
      v[5]    = -v[3];
      v[6]    = -v[2];
      v[7]    = -v[1];
      v[8]    = -v[0];
      
      w[0]   = 0.0812743883615744119718921581105;
      w[1]   = 0.180648160694857404058472031243;
      w[2]   = 0.260610696402935462318742869419;
      w[3]   = 0.312347077040002840068630406584;
      w[4]   = 0.330239355001259763164525069287;
      w[5]   = w[3];
      w[6]   = w[2];
      w[7]   = w[1];
      w[8]   = w[0];
      return;
    }
    
  case 10:
    {
     
      v[0]    = -0.973906528517171720077964012084;
      v[1]    = -0.865063366688984510732096688423;
      v[2]    = -0.679409568299024406234327365115;
      v[3]    = -0.433395394129247190799265943166;
      v[4]    = -0.148874338981631210864826001130;
      v[5]    = -v[4];
      v[6]    = -v[3];
      v[7]    = -v[2];
      v[8]    = -v[1];
      v[9]    = -v[0];
      
      w[0]   = 0.0666713443086881375935688098933;
      w[1]   = 0.149451349150580593145776339658;
      w[2]   = 0.219086362515982043995534934228;
      w[3]   = 0.269266719309996355091226921569;
      w[4]   = 0.295524224714752870173892994651;
      w[5]   = w[4];
      w[6]   = w[3];
      w[7]   = w[2];
      w[8]   = w[1];
      w[9]   = w[0];
      
      return;
    }
  case 11:
  case 12:
    {
      
      v[0]    = -0.981560634246719250690549090149;
      v[1]    = -0.904117256370474856678465866119;
      v[2]    = -0.769902674194304687036893833213;
      v[3]    = -0.587317954286617447296702418941;
      v[4]    = -0.367831498998180193752691536644;
      v[5]    = -0.125233408511468915472441369464;
      v[6]    = -v[5];
      v[7]    = -v[4];
      v[8]    = -v[3];
      v[9]    = -v[2];
      v[10]   = -v[1];
      v[11]   = -v[0];
      
      w[0]   = 0.0471753363865118271946159614850;
      w[1]   = 0.106939325995318430960254718194;
      w[2]   = 0.160078328543346226334652529543;
      w[3]   = 0.203167426723065921749064455810;
      w[4]   = 0.233492536538354808760849898925;
      w[5]   = 0.249147045813402785000562436043;
      w[6]   = w[5];
      w[7]   = w[4];
      w[8]   = w[3];
      w[9]   = w[2];
      w[10]  = w[1];
      w[11]  = w[0];
      
      return;
    }
    
  case 13:
  case 14:
  case 15:
  case 16:
    {
      
      v[0]  = -0.989400934991649932596;
      v[1]  = -0.944575023073232576078;
      v[2]  = -0.86563120238783; // need more digits here and below
      v[3]  = -0.75540440835500; // take from tables
      v[4]  = -0.61787624440264;
      v[5]  = -0.45801677765723;
      v[6]  = -0.28160355077926;
      v[7]  = -0.09501250983764;
      v[8]     = -v[7];
      v[9]     = -v[6];
      v[10]    = -v[5];
      v[11]    = -v[4];
      v[12]    = -v[3];
      v[13]    = -v[2];
      v[14]    = -v[1];
      v[15]    = -v[0];
      
     w[0]     = 0.02715245941175;
     w[1]     = 0.06225352393865;
     w[2]     = 0.09515851168249;
     w[3]     = 0.12462897125553;
     w[4]     = 0.14959598881658;
     w[5]     = 0.16915651939500;
     w[6]     = 0.18260341504492;
     w[7]     = 0.18945061045507;
     w[8]     = w[7];
     w[9]     = w[6];
     w[10]    = w[5];
     w[11]    = w[4];
     w[12]    = w[3];
     w[13]    = w[2];
     w[14]    = w[1];
     w[15]    = w[0];
     return;
   }
 case 17:
 case 18:
 case 19:
 case 20:
   {
  
     v[0]     = -0.99312859918510;
     v[1]     = -0.96397192727791;
     v[2]     = -0.91223442825133;
     v[3]     = -0.83911697182222;
     v[4]     = -0.74633190646015;
     v[5]     = -0.63605368072652;
     v[6]     = -0.51086700195083;
     v[7]     = -0.37370608871542;
     v[8]     = -0.22778585114164;
     v[9]     = -0.07652652113350;
     v[10]    = -v[9];
     v[11]    = -v[8];
     v[12]    = -v[7];
     v[13]    = -v[6];
     v[14]    = -v[5];
     v[15]    = -v[4];
     v[16]    = -v[3];
     v[17]    = -v[2];
     v[18]    = -v[1];
     v[19]    = -v[0];

     w[0]     = 0.01761400713915;
     w[1]     = 0.04060142980039;
     w[2]     = 0.06267204833411;
     w[3]     = 0.08327674157670;
     w[4]     = 0.10193011981724;
     w[5]     = 0.11819453196152;
     w[6]     = 0.13168863844918;
     w[7]     = 0.14209610931838;
     w[8]     = 0.14917298647260;
     w[9]     = 0.15275338713073;
     w[10]    = w[9];
     w[11]    = w[8];
     w[12]    = w[7];
     w[13]    = w[6];
     w[14]    = w[5];
     w[15]    = w[4];
     w[16]    = w[3];
     w[17]    = w[2];
     w[18]    = w[1];
     w[19]    = w[0];
     
     return;
     
   }
  }
  
  /*
  default:
    {
      {
	cout << "Quadrature rule " << level << " not available at this time."<<endl;
	exit(1);
      }
    }
  */   
    
}
